"0","# Library Loading"
"0","library(dplyr)"
"0","library(ggplot2)"
"0","library(ggrepel)"
"0","library(plotly)"
"0","library(stringr)"
"0","library(tidyr)"
"0","library(ggforce)"
"0",""
"0",""
"0","# Data Loading"
"0",""
"0","greenhouse <- read.csv(""Data/greenhouse.csv"")[,-1]"
"0","population <- read.csv(""Data/population.csv"")[,-1]"
"0","area <- read.csv('Data/area_km.csv', stringsAsFactors=FALSE) %>% filter(LANDUSE == 'Total area') %>% select(TIME, GEO, Value) %>% distinct() %>% filter(TIME == '2014')"
"0",""
"0","area$Value <- as.numeric(gsub("",.*$"", """", area$Value))"
"0","area$GEO[5] <- ""Germany"""
"0","area$Value <- area$Value *1000"
"0",""
"0","names(area)[2] <- ""countries"""
"0","names(area)[3] <- ""area"""
"0",""
"0","# Clean Date"
"0","greenhouse$time <- substr(greenhouse$time,1,4)"
"0","population$time <- substr(population$time,1,4)"
"0",""
"0"," # Analysis of levels"
"0","# levels(greenhouse$unit)"
"0","# levels(greenhouse$airpol)"
"0","# levels(greenhouse$geo)"
"0",""
"0"," "
"0","# Uniform unit of measure"
"0",""
"0","greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000 "
"0",""
"0","#Drop useless columns and distinct"
"0",""
"0","greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()"
"0",""
"0","# Keep only CO2 equivalents"
"0","greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')"
"0",""
"0",""
"0"," # Task 1: population and gas emission"
"0",""
"0","x <- colnames(greenhouse)"
"0","x[4] <- ""gas"""
"0","colnames(greenhouse) <- x"
"0",""
"0","x <- colnames(population)"
"0","x[3] <- ""population"""
"0","colnames(population) <- x"
"0",""
"0","rm(x)"
"0",""
"0","# Filter out non-EU countries "
"0","greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')"
"0","greenhouse$geo <-as.character(greenhouse$geo)"
"0",""
"0","population$geo <-as.character(population$geo)"
"0",""
"0","green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))"
"0","green_popu <- green_popu %>% mutate_if(is.character, as.factor)"
"0",""
"0","green_popu <- green_popu %>% filter(airpol == 'GHG') %>% select(-airpol) "
"0",""
"0","countries <- c('Austria', 'Belgium', 'Bulgaria', 'Cyprus', 'Czechia', 'Germany', 'Denmark', 'Estonia','Greece', 'Spain', 'Finland', 'France', 'Croatia',"
"0","               'Hungary', 'Ireland', 'Italy',  'Lithuania', 'Luxembourg', 'Latvia', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania',  'Sweden', 'Slovenia','Slovakia', 'United Kingdom' )"
"0",""
"0","green_popu$population <- green_popu$population/1000000"
"0",""
"0","green_popu <- data.frame(green_popu, countries, gas_per_pop = green_popu$gas/green_popu$population)"
"0",""
"0",""
"0","years_available <- green_popu %>% select(time) %>% distinct()"
"0",""
"0","df<- green_popu %>% filter(time == '2019')"
"0",""
"0",""
"0",""
"0","green_popu <- green_popu %>% inner_join(area, by = c('countries')) %>% select(-TIME)"
"0","green_popu <- data.frame(green_popu, gas_per_area = green_popu$gas/green_popu$area)"
"0",""
"0","dataset <- green_popu %>% filter(time == '2019') "
"0",""
"0","ggp <- ggplot(dataset, mapping = aes(x=population, y=gas)) +"
"0",""
"0","  geom_text_repel("
"0","   mapping = aes(label = countries),"
"0","    size = 2,"
"0","    min.segment.length = 0,"
"0","    seed = 42,"
"0","    box.padding = 0.4,"
"0","    arrow = arrow(length = unit(0.007, ""npc"")),"
"0","    nudge_x = .5,"
"0","    nudge_y = .5,"
"0","    color = ""grey60"") +"
"0","  "
"0","    geom_point(data = dataset,aes(colour=countries, size = gas/population), alpha=0.6) +"
"0","  "
"0","  labs("
"0","    title = 'Greenhouse Gas Emissions and Population (EU countries)',"
"0","    subtitle = 'Total Greenhouse gas emissions in CO2 equivalent for the year 2019 (excluding LULUCF and memory items, including international aviation) and population',"
"0","    x = ""Population (in Millions)"","
"0","    y = ""Total Greenhouse Emissions (Mil. tonnes)"""
"0","  ) +  "
"0","  theme("
"0","    legend.position = ""none"","
"0","    # Customize title and subtitle font/size/color"
"0","    plot.title = element_text("
"0","      size = 10, hjust = 0.5,"
"0","      color = ""#2a475e"""
"0","    ),"
"0","    "
"0","    # Adjust axis parameters such as size and color."
"0","    axis.text = element_text(size = 8, color = ""black""),"
"0","    axis.title = element_text(size = 7),"
"0","    axis.line = element_line(colour = ""grey50"", arrow = grid::arrow(length = unit(0.3, ""cm""))),"
"0","    "
"0","    # Use a light color for the background of the plot and the panel."
"0","    panel.background = element_rect(fill = ""white"", color = ""white""),"
"0","    plot.background = element_rect(fill = ""white"", color = ""white""),"
"0","    plot.subtitle=element_text(size=5, hjust=0.5, face=""italic"", color=""black"")"
"0","  )+"
"0","  facet_zoom(x = population < 15, y = gas < 190, horizontal = FALSE ,zoom.size = 0.3, show.area = FALSE,"
"0","             zoom.data = ifelse(dataset$population < 15, TRUE, FALSE)) + coord_cartesian(clip=""off"")"
"0",""
"0","ggp"
"0",""
