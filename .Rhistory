min.segment.length = 0,
seed = 2,
box.padding = 0.4,
arrow = arrow(length = unit(0.010, "npc")),
nudge_x = .15,
nudge_y = .5,
color = "grey30") +
labs(
title = "Population and Greenhouse Gas Emissions",
x = "Population (in Millions)",
y = "Total Greenhouse Emissions (Millions of tonnes)"
) +
theme(
legend.position = "none",
# Customize title and subtitle font/size/color
plot.title = element_text(
size = 20,
face = "bold",
color = "#2a475e"
),
plot.subtitle = element_text(
size = 15,
face = "bold",
color = "#1b2838"
),
plot.title.position = "plot",
# Adjust axis parameters such as size and color.
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12),
axis.line = element_line(colour = "grey50"),
# Use a light color for the background of the plot and the panel.
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
)
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population/1000000, y=gas)) +
geom_point(aes(colour=countries, size = gas), alpha=0.6) +
geom_text_repel(
aes(label = countries),
size = 6,
min.segment.length = 0,
seed = 2,
box.padding = 0.4,
arrow = arrow(length = unit(0.010, "npc")),
nudge_x = .15,
nudge_y = .5,
color = "grey30") +
labs(
title = "Population and Greenhouse Gas Emissions",
x = "Population (in Millions)",
y = "Total Greenhouse Emissions (Millions of tonnes)"
) +
theme(
legend.position = "none",
# Customize title and subtitle font/size/color
plot.title = element_text(
size = 20,
face = "bold",
color = "#2a475e"
),
plot.subtitle = element_text(
size = 15,
face = "bold",
color = "#1b2838"
),
plot.title.position = "plot",
# Adjust axis parameters such as size and color.
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12),
axis.line = element_line(colour = "grey50"),
# Use a light color for the background of the plot and the panel.
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
)
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population/1000000, y=gas)) +
geom_point(aes(colour=countries, size = gas), alpha=0.6) +
geom_text_repel(
aes(label = countries),
size = 4,
min.segment.length = 0,
seed = 2,
box.padding = 0.4,
arrow = arrow(length = unit(0.010, "npc")),
nudge_x = .15,
nudge_y = .5,
color = "grey30") +
labs(
title = "Population and Greenhouse Gas Emissions",
x = "Population (in Millions)",
y = "Total Greenhouse Emissions (Millions of tonnes)"
) +
theme(
legend.position = "none",
# Customize title and subtitle font/size/color
plot.title = element_text(
size = 20,
face = "bold",
color = "#2a475e"
),
plot.subtitle = element_text(
size = 15,
face = "bold",
color = "#1b2838"
),
plot.title.position = "plot",
# Adjust axis parameters such as size and color.
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12),
axis.line = element_line(colour = "grey50"),
# Use a light color for the background of the plot and the panel.
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
)
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population/1000000, y=gas)) +
geom_point(aes(colour=countries, size = gas/population), alpha=0.6) +
geom_text_repel(
aes(label = countries),
size = 4,
min.segment.length = 0,
seed = 2,
box.padding = 0.4,
arrow = arrow(length = unit(0.010, "npc")),
nudge_x = .15,
nudge_y = .5,
color = "grey30") +
labs(
title = "Population and Greenhouse Gas Emissions",
x = "Population (in Millions)",
y = "Total Greenhouse Emissions (Millions of tonnes)"
) +
theme(
legend.position = "none",
# Customize title and subtitle font/size/color
plot.title = element_text(
size = 20,
face = "bold",
color = "#2a475e"
),
plot.subtitle = element_text(
size = 15,
face = "bold",
color = "#1b2838"
),
plot.title.position = "plot",
# Adjust axis parameters such as size and color.
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12),
axis.line = element_line(colour = "grey50"),
# Use a light color for the background of the plot and the panel.
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
)
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population/1000000, y=gas)) +
geom_point(aes(colour=countries, size = gas/population), alpha=0.6) +
geom_text_repel(
aes(label = countries),
size = 4,
min.segment.length = 0,
seed = 2,
box.padding = 0.4,
# arrow = arrow(length = unit(0.010, "npc")),
nudge_x = .15,
nudge_y = .5,
color = "grey30") +
labs(
title = "Population and Greenhouse Gas Emissions",
x = "Population (in Millions)",
y = "Total Greenhouse Emissions (Millions of tonnes)"
) +
theme(
legend.position = "none",
# Customize title and subtitle font/size/color
plot.title = element_text(
size = 20,
face = "bold",
color = "#2a475e"
),
plot.subtitle = element_text(
size = 15,
face = "bold",
color = "#1b2838"
),
plot.title.position = "plot",
# Adjust axis parameters such as size and color.
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12),
axis.line = element_line(colour = "grey50"),
# Use a light color for the background of the plot and the panel.
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
)
ggp
green_popu <- data.frame(green_popu, countries, gas_per_pop = green_popu$gas/green_popu$population)
View(green_popu)
greenhouse <- read.csv("Data/greenhouse.csv")[,-1]
population <- read.csv("Data/population.csv")[,-1]
# Clean Date
greenhouse$time <- substr(greenhouse$time,1,4)
population$time <- substr(population$time,1,4)
# Analysis of levels
levels(greenhouse$unit)
levels(greenhouse$airpol)
levels(greenhouse$geo)
# Uniform unit of measure
greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000
#Drop useless columns and distinct
greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()
# Keep only CO2 equivalents
greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')
# Task 1: population and gas emission
x <- colnames(greenhouse)
x[4] <- "gas"
colnames(greenhouse) <- x
x <- colnames(population)
x[3] <- "population"
colnames(population) <- x
rm(x)
# Filter out non-EU countries
greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')
greenhouse$geo <-as.character(greenhouse$geo)
population$geo <-as.character(population$geo)
green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))
green_popu <- green_popu %>% mutate_if(is.character, as.factor)
green_popu <- green_popu %>% filter(airpol == 'GHG') %>% select(-airpol)%>% filter(time == '2019') %>% select(-time)
countries <- c('Austria', 'Belgium', 'Bulgaria', 'Cyprus', 'Czech Republic', 'Germany', 'Denmark', 'Estonia','Greece', 'Spain', 'Finland', 'France', 'Croatia',
'Hungary', 'Ireland', 'Italy',  'Lithuania', 'Luxembourg', 'Latvia', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania',  'Sweden', 'Slovenia','Slovakia', 'United Kingdom' )
green_popu$population <- green_popu$population/1000000
green_popu <- data.frame(green_popu, countries, gas_per_pop = green_popu$gas/green_popu$population)
View(green_popu)
View(green_popu)
runApp()
runApp()
View(greenhouse)
runApp()
runApp()
years_available <- green_popu %>% time %>% distinct()
greenhouse <- read.csv("Data/greenhouse.csv")[,-1]
population <- read.csv("Data/population.csv")[,-1]
# Clean Date
greenhouse$time <- substr(greenhouse$time,1,4)
population$time <- substr(population$time,1,4)
# Analysis of levels
levels(greenhouse$unit)
levels(greenhouse$airpol)
levels(greenhouse$geo)
# Uniform unit of measure
greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000
#Drop useless columns and distinct
greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()
# Keep only CO2 equivalents
greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')
# Task 1: population and gas emission
x <- colnames(greenhouse)
x[4] <- "gas"
colnames(greenhouse) <- x
x <- colnames(population)
x[3] <- "population"
colnames(population) <- x
rm(x)
# Filter out non-EU countries
greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')
greenhouse$geo <-as.character(greenhouse$geo)
population$geo <-as.character(population$geo)
green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))
green_popu <- green_popu %>% mutate_if(is.character, as.factor)
green_popu <- green_popu %>% filter(airpol == 'GHG') %>% select(-airpol)
countries <- c('Austria', 'Belgium', 'Bulgaria', 'Cyprus', 'Czech Republic', 'Germany', 'Denmark', 'Estonia','Greece', 'Spain', 'Finland', 'France', 'Croatia',
'Hungary', 'Ireland', 'Italy',  'Lithuania', 'Luxembourg', 'Latvia', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania',  'Sweden', 'Slovenia','Slovakia', 'United Kingdom' )
green_popu$population <- green_popu$population/1000000
green_popu <- data.frame(green_popu, countries, gas_per_pop = green_popu$gas/green_popu$population)
years_available <- green_popu %>% time %>% distinct()
years_available <- green_popu %>% select(time) %>% distinct()
runApp()
runApp()
runApp()
runApp()
runApp()
View(green_popu)
df<-green_popu %>% filter(time == '2019')
View(df)
View(green_popu)
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity")
p
# Horizontal bar plot
p + coord_flip()
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity")
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity") +
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
df<-green_popu %>% filter(time == '2019') %>% arrange(gas_per_pop)
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
View(df)
df<-green_popu %>% filter(time == '2019') %>% arrange(gas_per_pop)
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
View(df)
View(df)
df<-green_popu %>% filter(time == '2019') %>% arrange(gas_per_pop)
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(gas_per_pop,-countries), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(gas_per_pop), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(gas_per_pop,-countries), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
# Horizontal bar plot
p + coord_flip()
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(gas_per_pop,-countries), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries,-gas_per_pop), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
View(df)
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(gas_per_pop,countries), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(-gas_per_pop,countries), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(gas_per_pop,-countries), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, gas_per_pop), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(-countries, gas_per_pop), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, -gas_per_pop), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, -gas_per_pop, sum), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, -gas_per_pop), y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
View(df)
# Basic barplot
p<-ggplot(data=df, aes(x=gas_per_pop, y=countries)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")
p
# Basic barplot
p<-ggplot(data=df, aes(x=population, y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=countries, y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, -gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p
p + coord_flip()
df<- green_popu %>% filter(time == '2019') %>% arrange(gas_per_pop, desc())
df<- green_popu %>% filter(time == '2019') %>% arrange(desc(gas_per_pop))
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, -gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p + coord_flip()
df<- green_popu %>% filter(time == '2019') %>% arrange(desc(gas_per_pop, FALSE))
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, -gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p + coord_flip()
df<- green_popu %>% filter(time == '2019') %>% order(gas_per_pop, descrising = FALSE)
df<- green_popu %>% filter(time == '2019') %>% arrange(desc(gas_per_pop))
View(df)
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, -gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p + coord_flip()
# Basic barplot
p<-ggplot(data=df, aes(x=countries, y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p + coord_flip()
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p + coord_flip()
df<- green_popu %>% filter(time == '2019')
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal()
p + coord_flip()
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal() +
labs(
title = "Greenhouse gas emissions per population",
x = "Population (in Millions)",
y = "Country"
)
p + coord_flip()
# Basic barplot
p<-ggplot(data=df, aes(x=reorder(countries, gas_per_pop), y=gas_per_pop)) +
geom_bar(stat="identity", width=0.7, fill="steelblue")+
theme_minimal() +
labs(
x = "Greenhouse gas emissions per population",
y = "Country"
)
p + coord_flip()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
area <- read.csv('Data/area_km.csv')
View(area)
View(area)
View(area)
area <- read.csv('Data/area_km.csv') %>% filter(LANDUSE == 'Total area')
View(area)
area <- read.csv('Data/area_km.csv') %>% filter(LANDUSE == 'Total area') %>% select(TIME, GEO, Value) %>% distinct()
View(area)
class(area$Value)
as.numeric(area$Value)
area$Value <- as.numeric(area$Value)
View(area)
area <- read.csv('Data/area_km.csv') %>% filter(LANDUSE == 'Total area') %>% select(TIME, GEO, Value) %>% distinct()
View(area)
shiny::runApp()
install.packages(c("shinydashboard", "shinyWidgets"))
runApp()
runApp()
