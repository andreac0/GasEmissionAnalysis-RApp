shiny::runApp()
library(rsconnect)
deployApp()
install.packages(c("httr", "jsonlite"))
install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
res = GET("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/dataflow/ESTAT/TPS00001/1.0?references=descendants&detail=referencepartial&format=sdmx_2.1_generic&compressed=true")
View(res)
res$content
rawToChar(res$content)
res = GET("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/TPS00001/?format=JSON&lang=en")
res$content
rawToChar(res$content)
res = GET("https://ec.europa.eu/eurostat/api/dissemination/statistics/1.0/data/TPS00001?format=JSON&lang=en")
res$content
rawToChar(res$content)
View(res)
data = fromJSON(rawToChar(res$content))
View(data)
res = GET("https://ec.europa.eu/eurostat/api/dissemination/statistics/1.0/data/TPS00001?format=JSON&lang=en")
res
names(data)
View(data)
library (RCurl)
install.packages("RCurl")
download <- getURL("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/TPS00001/?format=TSV&compressed=true")
library (RCurl)
download <- getURL("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/TPS00001/?format=TSV&compressed=true")
download <- getURL("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/TPS00001/?format=SDMX-CSV&compressed=true")
download <- getURL("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/TPS00001/?format=SDMX-CSV&compressed=true")
download <- getURL("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/TPS00001/?format=sdmx_2.1_generic&compressed=true")
download <- getURL("https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/TPS00001/?format=sdmx_2.1_generic")
data <- read.csv (text = download)
download
data <- read.csv(text = download)
View(data)
install.packages("eurostat")
# Load the package
library(eurostat)
require(devtools)
install_github("rsdmx", "opensdmx")
install.packages("eurostat")
library(eurostat)
data <- get_eurostat('ENV_AIR_GGE')
search_eurostat('Greenhouse gas emissions')
x<-search_eurostat('Greenhouse gas emissions')
View(x)
data <- get_eurostat('env_air_gge')
View(data)
View(res)
View(data)
View(data)
data <- get_eurostat('env_air_gge', filters = list(time = '2019'))
View(data)
shiny::runApp()
runApp()
runApp()
`estat_env_air_gge$defaultview_en.csv` <- read.csv("D:/Download D/estat_env_air_gge$defaultview_en.csv.gz")
View(`estat_env_air_gge$defaultview_en.csv`)
View(data)
library(dplyr)
runApp()
data1 <- get_eurostat('env_air_gge')
data1 <- get_eurostat('TPS00001')
data1 <- get_eurostat('tps00001')
View(data1)
data1 <- get_eurostat('env_air_gge')
data2 <- get_eurostat('tps00001')
data1 <- get_eurostat('env_air_gge') %>% filter(time > '2019-01-01')
data1 <- get_eurostat('env_air_gge')
View(data1)
data1 <- get_eurostat('env_air_gge') %>% filter(time == '2019-01-01')
View(data1)
View(data2)
data2 <- get_eurostat('tps00001') %>% filter(time == '2019-01-01')
View(data2)
View(data1)
greenhouse <- get_eurostat('env_air_gge') %>% filter(time == '2019-01-01')
population <- get_eurostat('tps00001') %>% filter(time == '2019-01-01')
write.csv(greenhouse, file = "data/greenhouse.csv")
write.csv(greenhouse, file = "./greenhouse.csv")
write.csv(greenhouse, file = "./population.csv")
read.csv("data/greenhouse.csv")
greenhouse <- read.csv("data/greenhouse.csv")
population <- read.csv("data/population.csv")
population <- get_eurostat('tps00001') %>% filter(time == '2019-01-01')
write.csv(population, file = "./population.csv")
greenhouse <- read.csv("data/greenhouse.csv")
population <- read.csv("data/population.csv")
runApp()
runApp()
