green_popu <- green_popu %>% filter(time == '2019')
View(green_popu)
View(green_popu)
View(green_popu)
green_popu <- green_popu %>% filter(time == '2019') %>% select(-time)
View(green_popu)
View(green_popu)
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo), alpha=0.6)
print(ggp)
View(green_popu)
View(greenhouse)
View(green_popu)
View(green_popu)
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo), alpha=0.6) + facet_wrap(~ airpol)
print(ggp)
View(greenhouse)
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo), alpha=0.6) + geom_text(aes(label= geo),hjust=0, vjust=0)
+ facet_wrap(~ airpol)
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo), alpha=0.6) + geom_text(aes(label= geo),hjust=0, vjust=0)
+ facet_wrap(~ airpol)
print(ggp)
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo), alpha=0.6) + geom_text(aes(label= geo),hjust=0, vjust=0)+ facet_wrap(~ airpol)
print(ggp)
View(green_popu)
View(green_popu)
ita = green_popu %>% filter(geo = 'IT')
ita = green_popu %>% filter(geo == 'IT')
View(ita)
ita = green_popu %>% filter(geo == 'IT') %>% filter(airpol != 'GHG')
sum(ita$gas)
View(green_popu)
View(ita)
View(green_popu)
ita = green_popu %>% filter(geo == 'DE') %>% filter(airpol != 'GHG')
sum(ita$gas)
View(green_popu)
ita = green_popu %>% filter(geo == 'IT') %>% filter(airpol != 'GHG')
sum(ita$gas)
View(greenhouse)
View(ita)
ita = green_popu %>% filter(geo == 'IT') %>% filter(airpol != 'GHG')%>% filter(airpol != 'CH4')%>% filter(airpol != 'N2O')
sum(ita$gas)
View(ita)
View(green_popu)
greenhouse <- read.csv("Data/greenhouse.csv")[,-1]
population <- read.csv("Data/population.csv")[,-1]
# Clean Date
greenhouse$time <- substr(greenhouse$time,1,4)
population$time <- substr(population$time,1,4)
# Analysis of levels
levels(greenhouse$unit)
levels(greenhouse$airpol)
levels(greenhouse$geo)
# Uniform unit of measure
greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000
#Drop useless columns and distinct
greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()
# Keep only CO2 equivalents
greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')
View(greenhouse)
x <- colnames(greenhouse)
x[4] <- "gas"
colnames(greenhouse) <- x
x <- colnames(population)
x[3] <- "population"
colnames(population) <- x
rm(x)
# Filter out non-EU countries of 2019
greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')
greenhouse$geo <-as.character(greenhouse$geo)
population$geo <-as.character(population$geo)
green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))
green_popu <- green_popu %>% mutate_if(is.character, as.factor)
View(green_popu)
dataset <- green_popu[which(!is.na(green_popu$gas)),]
View(dataset)
View(green_popu)
ita = green_popu %>% filter(geo == 'IT') %>% filter(airpol != 'GHG')
sum(ita$gas)
View(ita)
green_popu <- green_popu %>% filter(time == '2019') %>% select(-time)
ita = green_popu %>% filter(geo == 'IT') %>% filter(airpol != 'GHG')
sum(ita$gas)
View(green_popu)
ita = green_popu %>% filter(geo == 'ES') %>% filter(airpol != 'GHG')
sum(ita$gas)
View(green_popu)
View(ita)
sum(ita$gas, TRUE)
sum(ita$gas, na.rm = TRUE)
greenhouse <- read.csv("Data/greenhouse.csv")[,-1]
population <- read.csv("Data/population.csv")[,-1]
# Clean Date
greenhouse$time <- substr(greenhouse$time,1,4)
population$time <- substr(population$time,1,4)
# Analysis of levels
levels(greenhouse$unit)
levels(greenhouse$airpol)
levels(greenhouse$geo)
# Uniform unit of measure
greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000
#Drop useless columns and distinct
greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()
# Keep only CO2 equivalents
greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')
# Task 1: population and gas emission
x <- colnames(greenhouse)
x[4] <- "gas"
colnames(greenhouse) <- x
x <- colnames(population)
x[3] <- "population"
colnames(population) <- x
rm(x)
# Filter out non-EU countries of 2019
greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')
greenhouse$geo <-as.character(greenhouse$geo)
population$geo <-as.character(population$geo)
green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))
green_popu <- green_popu %>% mutate_if(is.character, as.factor)
View(green_popu)
dataset <- green_popu[which(!is.na(green_popu$gas)),]
#Avoid undersampling
n <- dataset %>% group_by(airpol) %>% count()
View(n)
#Avoid undersampling
n <- dataset %>% group_by(airpol) %>% count()
train <- data.frame()
test <- data.frame()
for (i in as.character(unlist(n[,1]))){
temp <- dataset %>% filter(airpol == i)
index <- sample(nrow(temp), nrow(temp)*4/5)
train <- rbind(train,temp[index,])
test <- rbind(test,temp[-index,])
}
# Random Forest
library(randomForest)
(rf_fit <- randomForest(gas ~ ., data = train))
plot(rf_fit)
data_gr <- train %>%
mutate(set="train") %>%
bind_rows(test %>% mutate(set="test"))
data_gr$fit <- predict(rf_fit, data_gr)
ggp <- ggplot(data = data_gr, mapping = aes(x=fit, y=gas)) +
geom_point(aes(colour=set), alpha=0.6) +
geom_abline(slope=1, intercept = 0) +
geom_smooth(method = "lm", se = FALSE, aes(colour=set), alpha=0.6)
print(ggp)
set.seed(100)
oob_err <- double(4)
test_err <- double(4)
#mtry Ã¨ il numero di variabili scelte caualmente ad ogni split
for(mtry in 1:4) {
rf <- randomForest(gas ~ . , data = train, mtry=mtry,ntree=400)
oob_err[mtry] <- rf$mse[400] #Errore per tutti gli alberi adattati
pred <- predict(rf,test) #Previsioni sul set di test per ciascun albero
test_err[mtry] <- with(test, mean( (gas - pred)^2)) #Mean Squared Error per l'insieme di test
}
# Errore sull'insieme di Test
test_err
ds_gr <- data_frame(type=c(rep("test", length(test_err)), rep("oob", length(oob_err))),
mtry = c(1:length(test_err), 1:length(oob_err)),
error=c(test_err, oob_err))
ggp <- ggplot(data = ds_gr, mapping = aes(x=mtry,y=error)) +
geom_line(aes(colour=type)) +
geom_point(aes(colour=type)) +
ggtitle("OOB e Errore di test error Vs. Numero di variabili negli split (mtry)")
print(ggp)
set.seed(100)
(rf_fit <- randomForest(gas ~ ., data = train, mtry=3))
data_gr <- train %>%
mutate(set="train") %>%
bind_rows(test %>% mutate(set="test"))
data_gr$fit <- predict(rf_fit, data_gr)
mse <- data_gr %>%
filter(set=="test") %>%
summarise(mse = mean((fit-gas)^2)) %>%
pull()
print(mse)
ggp <- ggplot(data = data_gr, mapping = aes(x=fit, y=gas)) +
geom_point(aes(colour=set), alpha=0.6) +
geom_abline(slope=1, intercept = 0) +
geom_smooth(method = "lm", se = FALSE, aes(colour=set), alpha=0.6)
print(ggp)
saveRDS(rf_fit, "model.rds")
my_model <- readRDS("model.rds")
# Predict NAs through a Random Forest model
index <- which(is.na(green_popu$gas))
dataset <- green_popu[index,-4]
dataset <- predict(my_model, dataset)
green_popu[which(is.na(green_popu$gas)),'gas'] <- as.numeric(dataset)
estimated <- 1:NROW(green_popu)
estimated[which(estimated %in% index)] <- 'Yes'
estimated[which(estimated != 'Yes')] <- 'No'
green_popu <- data.frame(green_popu, estimated)
green_popu
View(green_popu)
View(n)
View(n)
View(green_popu)
greenhouse <- read.csv("Data/greenhouse.csv")[,-1]
population <- read.csv("Data/population.csv")[,-1]
# Clean Date
greenhouse$time <- substr(greenhouse$time,1,4)
population$time <- substr(population$time,1,4)
# Analysis of levels
levels(greenhouse$unit)
levels(greenhouse$airpol)
levels(greenhouse$geo)
# Uniform unit of measure
greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000
#Drop useless columns and distinct
greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()
# Keep only CO2 equivalents
greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')
# Task 1: population and gas emission
x <- colnames(greenhouse)
x[4] <- "gas"
colnames(greenhouse) <- x
x <- colnames(population)
x[3] <- "population"
colnames(population) <- x
rm(x)
# Filter out non-EU countries
greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')
greenhouse$geo <-as.character(greenhouse$geo)
population$geo <-as.character(population$geo)
green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))
green_popu <- green_popu %>% mutate_if(is.character, as.factor)
View(green_popu)
View(green_popu)
green_popu <- green_popu %>% filter(airpol != 'GHG')
View(green_popu)
dataset <- green_popu[which(!is.na(green_popu$gas)),]
#Avoid undersampling
n <- dataset %>% group_by(airpol) %>% count()
View(n)
View(green_popu)
View(n)
dataset <- green_popu[which(!is.na(green_popu$gas)),] %>% filter(airpol != 'HFC_PFC_NSP_CO2E') %>% filter(airpol != 'NF3_CO2E')
#Avoid undersampling
n <- dataset %>% group_by(airpol) %>% count()
View(n)
train <- data.frame()
test <- data.frame()
for (i in as.character(unlist(n[,1]))){
temp <- dataset %>% filter(airpol == i)
index <- sample(nrow(temp), nrow(temp)*4/5)
train <- rbind(train,temp[index,])
test <- rbind(test,temp[-index,])
}
View(dataset)
tree(gas ~ ., data= dataset)
n = tree(gas ~ ., data= dataset)
summary(n)
n = tree(gas ~ ., data = train)
summary(n)
predict(n, test)
View(test)
# Random Forest
library(randomForest)
(rf_fit <- randomForest(gas ~ ., data = train))
plot(rf_fit)
data_gr <- train %>%
mutate(set="train") %>%
bind_rows(test %>% mutate(set="test"))
data_gr$fit <- predict(rf_fit, data_gr)
ggp <- ggplot(data = data_gr, mapping = aes(x=fit, y=gas)) +
geom_point(aes(colour=set), alpha=0.6) +
geom_abline(slope=1, intercept = 0) +
geom_smooth(method = "lm", se = FALSE, aes(colour=set), alpha=0.6)
print(ggp)
set.seed(100)
oob_err <- double(4)
test_err <- double(4)
#mtry Ã¨ il numero di variabili scelte caualmente ad ogni split
for(mtry in 1:4) {
rf <- randomForest(gas ~ . , data = train, mtry=mtry,ntree=400)
oob_err[mtry] <- rf$mse[400] #Errore per tutti gli alberi adattati
pred <- predict(rf,test) #Previsioni sul set di test per ciascun albero
test_err[mtry] <- with(test, mean( (gas - pred)^2)) #Mean Squared Error per l'insieme di test
}
# Errore sull'insieme di Test
test_err
ds_gr <- data_frame(type=c(rep("test", length(test_err)), rep("oob", length(oob_err))),
mtry = c(1:length(test_err), 1:length(oob_err)),
error=c(test_err, oob_err))
ggp <- ggplot(data = ds_gr, mapping = aes(x=mtry,y=error)) +
geom_line(aes(colour=type)) +
geom_point(aes(colour=type)) +
ggtitle("OOB e Errore di test error Vs. Numero di variabili negli split (mtry)")
print(ggp)
set.seed(100)
(rf_fit <- randomForest(gas ~ ., data = train, mtry=3))
data_gr <- train %>%
mutate(set="train") %>%
bind_rows(test %>% mutate(set="test"))
data_gr$fit <- predict(rf_fit, data_gr)
mse <- data_gr %>%
filter(set=="test") %>%
summarise(mse = mean((fit-gas)^2)) %>%
pull()
print(mse)
ggp <- ggplot(data = data_gr, mapping = aes(x=fit, y=gas)) +
geom_point(aes(colour=set), alpha=0.6) +
geom_abline(slope=1, intercept = 0) +
geom_smooth(method = "lm", se = FALSE, aes(colour=set), alpha=0.6)
print(ggp)
saveRDS(rf_fit, "model.rds")
my_model <- readRDS("model.rds")
# Predict NAs through a Random Forest model
index <- which(is.na(green_popu$gas))
dataset <- green_popu[index,-4]
dataset <- predict(my_model, dataset)
green_popu[which(is.na(green_popu$gas)),'gas'] <- as.numeric(dataset)
View(green_popu)
estimated <- 1:NROW(green_popu)
estimated[which(estimated %in% index)] <- 'Yes'
estimated[which(estimated != 'Yes')] <- 'No'
green_popu <- data.frame(green_popu, estimated)
View(green_popu)
dataset <- green_popu[which(!is.na(green_popu$gas)),] %>% filter(airpol != 'HFC_PFC_NSP_CO2E') %>% filter(airpol != 'NF3_CO2E')
#Avoid undersampling
n <- dataset %>% group_by(airpol) %>% count()
train <- data.frame()
test <- data.frame()
for (i in as.character(unlist(n[,1]))){
temp <- dataset %>% filter(airpol == i)
index <- sample(nrow(temp), nrow(temp)*4/5)
train <- rbind(train,temp[index,])
test <- rbind(test,temp[-index,])
}
n = lm(gas ~ ., data = train)
summary(n)
#Avoid undersampling
n <- dataset %>% group_by(airpol) %>% count()
View(n)
dataset <- green_popu[which(!is.na(green_popu$gas)),] %>% filter(airpol != 'HFC_PFC_NSP_CO2E') %>% filter(airpol != 'NF3_CO2E')
#Avoid undersampling
n <- dataset %>% group_by(airpol) %>% count()
train <- data.frame()
test <- data.frame()
for (i in as.character(unlist(n[,1]))){
temp <- dataset %>% filter(airpol == i)
index <- sample(nrow(temp), nrow(temp)*4/5)
train <- rbind(train,temp[index,])
test <- rbind(test,temp[-index,])
}
View(n)
# Data Loading
greenhouse <- read.csv("Data/greenhouse.csv")[,-1]
population <- read.csv("Data/population.csv")[,-1]
# Clean Date
greenhouse$time <- substr(greenhouse$time,1,4)
population$time <- substr(population$time,1,4)
# Analysis of levels
levels(greenhouse$unit)
levels(greenhouse$airpol)
levels(greenhouse$geo)
# Uniform unit of measure
greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000
#Drop useless columns and distinct
greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()
# Keep only CO2 equivalents
greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')
# Task 1: population and gas emission
x <- colnames(greenhouse)
x[4] <- "gas"
colnames(greenhouse) <- x
x <- colnames(population)
x[3] <- "population"
colnames(population) <- x
rm(x)
# Filter out non-EU countries
greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')
greenhouse$geo <-as.character(greenhouse$geo)
population$geo <-as.character(population$geo)
green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))
green_popu <- green_popu %>% mutate_if(is.character, as.factor)
green_popu <- green_popu %>% filter(airpol == 'GHG')
View(green_popu)
View(green_popu)
green_popu <- green_popu %>% filter(airpol == 'GHG') %>% select(-airpol)
View(green_popu)
green_popu <- green_popu %>% filter(airpol == 'GHG') %>% select(-airpol)%>% filter(time == '2019') %>% select(-time)
greenhouse <- read.csv("Data/greenhouse.csv")[,-1]
population <- read.csv("Data/population.csv")[,-1]
# Clean Date
greenhouse$time <- substr(greenhouse$time,1,4)
population$time <- substr(population$time,1,4)
# Analysis of levels
levels(greenhouse$unit)
levels(greenhouse$airpol)
levels(greenhouse$geo)
# Uniform unit of measure
greenhouse[which(greenhouse$unit == 'THS_T'), 'values'] <- greenhouse[which(greenhouse$unit == 'THS_T'), 'values']/1000
#Drop useless columns and distinct
greenhouse <- greenhouse %>% filter(unit == 'MIO_T') %>% select(-unit) %>% distinct()
# Keep only CO2 equivalents
greenhouse <- greenhouse %>% filter(airpol != 'CH4') %>% filter(airpol != 'N2O')
# Task 1: population and gas emission
x <- colnames(greenhouse)
x[4] <- "gas"
colnames(greenhouse) <- x
x <- colnames(population)
x[3] <- "population"
colnames(population) <- x
rm(x)
# Filter out non-EU countries
greenhouse <- greenhouse %>% filter(substring(geo,1,2) != 'EU') %>% filter(substring(geo,1,2) != 'IS')
greenhouse$geo <-as.character(greenhouse$geo)
population$geo <-as.character(population$geo)
green_popu <- greenhouse %>% inner_join(population, by = c('geo', 'time'))
green_popu <- green_popu %>% mutate_if(is.character, as.factor)
green_popu <- green_popu %>% filter(airpol == 'GHG') %>% select(-airpol)%>% filter(time == '2019') %>% select(-time)
View(green_popu)
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo), alpha=0.6) + geom_text(aes(label= geo),hjust=0, vjust=0)
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas, size = gas)) +
geom_point(aes(colour=geo), alpha=0.6) +
geom_text(aes(label= geo),hjust=0, vjust=0)
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas, size = gas)) +
geom_point(aes(colour=geo), alpha=0.6) +
geom_text(aes(label= geo))
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas, size = gas)) +
geom_point(aes(colour=geo), alpha=0.6) +
geom_text(aes(label= geo),hjust=1, vjust=0)
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo, size = gas), alpha=0.6) +
geom_text(aes(label= geo),hjust=1, vjust=0)
ggp
ggp <- ggplot(green_popu, aes(x=population, y=gas, label=geo)) +
geom_bar(stat='identity', aes(fill=geo), width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Normalised mileage from 'mtcars'",
title= "Diverging Bars") +
coord_flip()
ggp
ggp <- ggplot(green_popu, aes(x=population, y=gas, label=geo))
ggp
ggp <- ggplot(green_popu, aes(x=population, y=gas, label=geo)) +
geom_bar(stat='identity', aes(fill=geo), width=.5)
ggp
ggp <-ggplot(green_popu, aes(x=population, y=gas)) +
geom_point(aes(colour=geo, size = gas), alpha=0.6) +   # Draw points
geom_segment(aes(x=population,
xend=population,
y=min(gas),
yend=max(gas)),
linetype="dashed",
size=0.1) +   # Draw dashed lines
labs(title="Dot Plot",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
coord_flip()
ggp
ggp <-ggplot(green_popu, aes(x=population, y=gas)) + geom_histogram(aes(fill=geo),
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggp
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo, size = gas), alpha=0.6) +
geom_text(aes(label= geo),hjust=1, vjust=0)
ggp
View(green_popu)
library("xlsx")
write.xlsx(green_popu, file, sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
library(openxlsx)
write.xlsx(green_popu, file, sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
write.xlsx(green_popu, 'test.xlsx', sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
install.packages("gridExtra")
library("gridExtra")
ggp <- ggplot(data = green_popu, mapping = aes(x=population, y=gas)) +
geom_point(aes(colour=geo, size = gas), alpha=0.6) +
geom_text(aes(label= geo),hjust=1, vjust=0)
ggp2 <-ggplot(green_popu, aes(x=population, y=gas)) + geom_histogram(aes(fill=geo),
binwidth = .1,
col="black",
size=.1) +  # change binwidth
labs(title="Histogram with Auto Binning",
subtitle="Engine Displacement across Vehicle Classes")
ggp2
ggp2 <-ggplot() + geom_histogram(aes(fill=geo),
binwidth = .1,
col="black",
size=.1)
ggp2
ggp2
ggp2 <-ggplot() + geom_histogram(aes(fill=geo), binwidth = .1, col="black", size=.1)
ggp2
ggp2 <-ggplot(green_popu, mapping = aes(x=population, y=gas)) + geom_histogram(aes(fill=geo), binwidth = .1, col="black", size=.1)
ggp2
ggp2 <-ggplot(green_popu, mapping = aes(x=population)) + geom_histogram(aes(fill=geo), binwidth = .1, col="black", size=.1)
ggp2
ggp2 <-ggplot(green_popu, mapping = aes(geo)) + geom_histogram(aes(fill=geo), binwidth = .1, col="black", size=.1)
ggp2
